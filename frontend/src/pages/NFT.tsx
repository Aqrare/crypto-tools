import React, { useState } from "react";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { ERC721ABI } from "../lib/ERC721ABI";
import { writeContract, waitForTransactionReceipt } from "@wagmi/core";
import { useAccount } from "wagmi";
import { config } from "../wagmi";
import {
  Input,
  Button,
  useDisclosure,
  Grid,
  GridItem,
  Box,
  VStack,
  Heading,
  Link,
  Center,
} from "@chakra-ui/react";
import { parseGwei } from "viem";
import { useHexStringInput, useNumberInput } from "../hooks";
import ConfirmationModal from "../components/ConfirmationModal";
import NFTAction from "../components/NFTAction";

interface NFTActionProps {
  title: string;
  inputs: Array<{
    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
    placeholder: string;
    type?: string;
  }>;
  onSubmit: () => void;
  buttonText: string;
}

const Home: NextPage = () => {
  const account = useAccount();
  const [NFTContractAddress, handleContractAddressChange] = useHexStringInput();
  const [spenderAddress, handleSpenderAddressChange] = useHexStringInput();
  const [transferFromAddress, handleTransferFromAddressChange] =
    useHexStringInput();
  const [transferToAddress, handleTransferToAddressChange] =
    useHexStringInput();
  const [mintToAddress, handleMintToAddress] = useHexStringInput();
  const [approvalId, handleApproveAmount] = useNumberInput();
  const [transferId, handleTransferTokenId] = useNumberInput();
  const [mintId, handleMintId] = useNumberInput();
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [transactionResult, setTransactionResult] = useState<any>(null);

  const handleTransaction = async (
    functionName: string,
    args: any[],
    errorMessage: string
  ) => {
    try {
      const result = await writeContract(config, {
        abi: ERC721ABI,
        address: NFTContractAddress,
        functionName,
        args,
        maxFeePerGas: parseGwei("200"),
      });
      const transactionReceipt = await waitForTransactionReceipt(config, {
        hash: result,
      });
      setTransactionResult(transactionReceipt.transactionHash);
      onOpen();
    } catch (error) {
      console.error(errorMessage, error);
    }
  };

  const approve = () =>
    handleTransaction(
      "approve",
      [spenderAddress, approvalId],
      "Approval failed:"
    );

  const mint = () =>
    handleTransaction("mint", [mintToAddress, mintId], "Minting failed:");

  const transferFrom = () =>
    handleTransaction(
      "transferFrom",
      [transferFromAddress, transferToAddress, transferId],
      "Transfer failed:"
    );

  const nftActions = [
    {
      title: "Approve NFT",
      inputs: [
        {
          onChange: handleSpenderAddressChange,
          placeholder: "Spender Address",
        },
        {
          onChange: handleApproveAmount,
          placeholder: "Token ID",
          type: "number",
        },
      ],
      onSubmit: approve,
      buttonText: "Approve",
    },
    {
      title: "Transfer NFT",
      inputs: [
        {
          onChange: handleTransferFromAddressChange,
          placeholder: "Address From",
        },
        { onChange: handleTransferToAddressChange, placeholder: "Address To" },
        {
          onChange: handleTransferTokenId,
          placeholder: "Token ID",
          type: "number",
        },
      ],
      onSubmit: transferFrom,
      buttonText: "Transfer",
    },
    {
      title: "Minting NFT",
      inputs: [
        { onChange: handleMintToAddress, placeholder: "Mint To" },
        { onChange: handleMintId, placeholder: "Token ID", type: "number" },
      ],
      onSubmit: mint,
      buttonText: "Mint",
    },
  ];

  return (
    <Box minHeight="100vh" bg="black" color="white" padding="20px">
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <VStack spacing={8} align="stretch">
        <Box alignSelf="flex-end">
          <ConnectButton />
        </Box>

        <Heading
          textAlign="center"
          fontSize="4xl"
          textShadow="0 0 5px #00ffff"
        >
          NFT Handling Tool
        </Heading>
        <Center>
          <Input
            onChange={handleContractAddressChange}
            width="1000px"
            maxWidth="1000px"
            placeholder="NFT Contract Address"
            borderColor="#00ffff"
            _hover={{ borderColor: "#ff00ff" }}
            _focus={{ borderColor: "#ff00ff", boxShadow: "0 0 0 1px #ff00ff" }}
          />
        </Center>

        <Center>
          <Grid templateColumns="repeat(1, 1fr)" gap={6}>
            {nftActions.map((action: NFTActionProps, index) => (
              <GridItem key={index}>
                <NFTAction {...action} />
              </GridItem>
            ))}
          </Grid>
        </Center>

        <ConfirmationModal
          isOpen={isOpen}
          onClose={onClose}
          title="Transaction Confirmed"
          message="Your transaction has been successfully processed."
          hash={transactionResult}
        />
      </VStack>
    </Box>
  );
};

export default Home;
